"""Split app_user subscription data into a separate table to allow a more fine-grained control over subscriptions

Revision ID: 79e0c9de90f0
Revises: 5ee455656a96
Create Date: 2019-10-14 01:05:50.621591

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '79e0c9de90f0'
down_revision = '5ee455656a96'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_subscription',
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('day',
                              sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY',
                                      name='day'), nullable=False),
                    sa.Column('campus_id', sa.Integer(), nullable=False),
                    sa.Column('active', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['campus_id'], ['campus.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['app_user.id'], onupdate='CASCADE', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', 'day')
                    )
    op.execute("""
    INSERT INTO user_subscription(user_id, day, campus_id, active)
    SELECT id, 'MONDAY', campus_mon_id, active FROM app_user
    """)
    op.execute("""
    INSERT INTO user_subscription(user_id, day, campus_id, active)
    SELECT id, 'TUESDAY', campus_tue_id, active FROM app_user
    """)
    op.execute("""
    INSERT INTO user_subscription(user_id, day, campus_id, active)
    SELECT id, 'WEDNESDAY', campus_wed_id, active FROM app_user
    """)
    op.execute("""
    INSERT INTO user_subscription(user_id, day, campus_id, active)
    SELECT id, 'THURSDAY', campus_thu_id, active FROM app_user
    """)
    op.execute("""
    INSERT INTO user_subscription(user_id, day, campus_id, active)
    SELECT id, 'FRIDAY', campus_fri_id, active FROM app_user
    """)
    op.drop_constraint('Subscription_campus_mon_id_fkey', 'app_user', type_='foreignkey')
    op.drop_constraint('Subscription_campus_tue_id_fkey', 'app_user', type_='foreignkey')
    op.drop_constraint('Subscription_campus_wed_id_fkey', 'app_user', type_='foreignkey')
    op.drop_constraint('Subscription_campus_thu_id_fkey', 'app_user', type_='foreignkey')
    op.drop_constraint('Subscription_campus_fri_id_fkey', 'app_user', type_='foreignkey')
    op.drop_column('app_user', 'campus_mon_id')
    op.drop_column('app_user', 'campus_tue_id')
    op.drop_column('app_user', 'campus_wed_id')
    op.drop_column('app_user', 'campus_thu_id')
    op.drop_column('app_user', 'campus_fri_id')
    op.drop_column('app_user', 'active')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('app_user', sa.Column('active', sa.BOOLEAN()))
    op.add_column('app_user', sa.Column('campus_mon_id', sa.INTEGER(), autoincrement=False))
    op.add_column('app_user', sa.Column('campus_tue_id', sa.INTEGER(), autoincrement=False))
    op.add_column('app_user', sa.Column('campus_wed_id', sa.INTEGER(), autoincrement=False))
    op.add_column('app_user', sa.Column('campus_thu_id', sa.INTEGER(), autoincrement=False))
    op.add_column('app_user', sa.Column('campus_fri_id', sa.INTEGER(), autoincrement=False))
    op.execute("""
    UPDATE app_user
    SET campus_fri_id = (
        SELECT campus_id FROM user_subscription
        WHERE user_subscription.user_id = app_user.id AND day = 'FRIDAY'
    )
    """)
    op.execute("""
    UPDATE app_user
    SET campus_thu_id = (
        SELECT campus_id FROM user_subscription
        WHERE user_subscription.user_id = app_user.id AND day = 'THURSDAY'
    )
    """)
    op.execute("""
    UPDATE app_user
    SET campus_wed_id = (
        SELECT campus_id FROM user_subscription
        WHERE user_subscription.user_id = app_user.id AND day = 'WEDNESDAY'
    )
    """)
    op.execute("""
    UPDATE app_user
    SET campus_tue_id = (
        SELECT campus_id FROM user_subscription
        WHERE user_subscription.user_id = app_user.id AND day = 'TUESDAY'
    )
    """)
    op.execute("""
    UPDATE app_user
    SET campus_mon_id = (
        SELECT campus_id FROM user_subscription
        WHERE user_subscription.user_id = app_user.id AND day = 'MONDAY'
    )
    """)
    # Add some fallback data in case the user was created after migration
    op.execute("""
    UPDATE app_user
    SET campus_mon_id = (
        SELECT id FROM campus
        WHERE short_name = 'cmi'
    )
    WHERE campus_mon_id IS NULL
    """)
    op.execute("""
    UPDATE app_user
    SET campus_tue_id = (
        SELECT id FROM campus
        WHERE short_name = 'cmi'
    )
    WHERE campus_tue_id IS NULL
    """)
    op.execute("""
    UPDATE app_user
    SET campus_wed_id = (
        SELECT id FROM campus
        WHERE short_name = 'cmi'
    )
    WHERE campus_wed_id IS NULL
    """)
    op.execute("""
    UPDATE app_user
    SET campus_thu_id = (
        SELECT id FROM campus
        WHERE short_name = 'cmi'
    )
    WHERE campus_thu_id IS NULL
    """)
    op.execute("""
    UPDATE app_user
    SET campus_fri_id = (
        SELECT id FROM campus
        WHERE short_name = 'cmi'
    )
    WHERE campus_fri_id IS NULL
    """)
    op.execute("""
    UPDATE app_user
    SET active = 'f'
    WHERE active IS NULL
    """)
    op.alter_column('app_user', 'active', server_default='t', nullable=False)
    op.alter_column('app_user', 'campus_mon_id', nullable=False)
    op.alter_column('app_user', 'campus_tue_id', nullable=False)
    op.alter_column('app_user', 'campus_wed_id', nullable=False)
    op.alter_column('app_user', 'campus_thu_id', nullable=False)
    op.alter_column('app_user', 'campus_fri_id', nullable=False)
    op.create_foreign_key('Subscription_campus_mon_id_fkey', 'app_user', 'campus', ['campus_mon_id'], ['id'])
    op.create_foreign_key('Subscription_campus_tue_id_fkey', 'app_user', 'campus', ['campus_tue_id'], ['id'])
    op.create_foreign_key('Subscription_campus_wed_id_fkey', 'app_user', 'campus', ['campus_wed_id'], ['id'])
    op.create_foreign_key('Subscription_campus_thu_id_fkey', 'app_user', 'campus', ['campus_thu_id'], ['id'])
    op.create_foreign_key('Subscription_campus_fri_id_fkey', 'app_user', 'campus', ['campus_fri_id'], ['id'])
    op.drop_table('user_subscription')

    # Day is generated in this migration script, so we delete it here
    op.execute("""DROP TYPE day""")
    # ### end Alembic commands ###
